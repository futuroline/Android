apply plugin: 'com.android.application'


android {
    signingConfigs {
        release {
            try {
                storeFile file(KEYSTORE_FILE_PATH)
                storePassword KEYSTORE_PASSWORD
                keyAlias "malalaoshi"
                keyPassword KEY_PASSWORD
            }
            catch (ex) {
                throw new InvalidUserDataException(
                        "You should define KEYSTORE_FILE_PATH, KEYSTORE_PASSWORD and KEY_PASSWORD in gradle.properties.")
            }
        }

        debug {
            try {
                storeFile file(KEYSTORE_FILE_PATH)
                storePassword KEYSTORE_PASSWORD
                keyAlias "malalaoshi"
                keyPassword KEY_PASSWORD
            }
            catch (ex) {
                throw new InvalidUserDataException(
                        "You should define KEYSTORE_FILE_PATH, KEYSTORE_PASSWORD and KEY_PASSWORD in gradle.properties.")
            }
        }
    }
    compileSdkVersion 24
    buildToolsVersion '24.0.2'

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    defaultConfig {
        applicationId "com.malalaoshi.android"
        minSdkVersion 16
        targetSdkVersion 24
        versionCode 10
        versionName "2.3.1"
    }
    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            buildConfigField "boolean", "LOG_DEBUG", "true"
            versionNameSuffix "-debug"
            minifyEnabled false
            zipAlignEnabled false
            manifestPlaceholders = [jpush_key: PARENT_JPUSH_KEY_DEBUG]
            buildConfigField("String", "API_HOST", "\"" + DEV_SERVER + "\"")
            resValue("string", "api_host", "\"" + DEV_SERVER + "\"")
            resValue("string", "build_type", "debug")
        }
        devrelease {
            applicationIdSuffix ".dev"
            buildConfigField "boolean", "LOG_DEBUG", "false"
            minifyEnabled true
            zipAlignEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            manifestPlaceholders = [jpush_key: PARENT_JPUSH_KEY_DEV]
            buildConfigField("String", "API_HOST", "\"" + DEV_SERVER + "\"")
            resValue("string", "api_host", "\"" + DEV_SERVER + "\"")
            resValue("string", "build_type", "release")
        }
        stagerelease {
            applicationIdSuffix ".stage"
            buildConfigField "boolean", "LOG_DEBUG", "false"
            minifyEnabled true
            zipAlignEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            manifestPlaceholders = [jpush_key: PARENT_JPUSH_KEY_STAGE]
            buildConfigField("String", "API_HOST", "\"" + STAGE_SERVER + "\"")
            resValue("string", "api_host", "\"" + STAGE_SERVER + "\"")
            resValue("string", "build_type", "release")
        }
        prdrelease {
            buildConfigField "boolean", "LOG_DEBUG", "false"
            minifyEnabled true
            zipAlignEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            manifestPlaceholders = [jpush_key: PARENT_JPUSH_KEY_RELEASE]
            buildConfigField("String", "API_HOST", "\"" + PRD_SERVER + "\"")
            resValue("string", "api_host", "\"" + PRD_SERVER + "\"")
            resValue("string", "build_type", "release")
        }
    }
    variantFilter { // buildTypes没有release
        if (it.buildType.name == 'release') {
            it.setIgnore(true)
        }
    }

    lintOptions {
        abortOnError true
    }

    productFlavors {
        /*teacher {
            applicationId "com.malalaoshi.android.teacher"
        }*/
        parent {
            applicationId "com.malalaoshi.android.parent"
        }
    }

    packagingOptions {
        exclude '.readme'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    project.afterEvaluate {
        //重置ShareSDK中appId和appSecret
        tasks.getByName('generateParentDevreleaseAssets') {
            it.doFirst {
                initShareSdk(PARENT_APP_ID_DEV,PARENT_APP_SECRET_DEV)
            }
        }
        tasks.getByName('generateParentStagereleaseAssets') {
            it.doFirst {
                initShareSdk(PARENT_APP_ID_STAGE,PARENT_APP_SECRET_STAGE)
            }
        }
        tasks.getByName('generateParentPrdreleaseAssets') {
            it.doFirst {
                initShareSdk(PARENT_APP_ID_RELEASE,PARENT_APP_SECRET_RELEASE)
            }
        }
    }
}

def initShareSdk(appId, appSecret) {
    def DevInfor = new XmlParser().parse(file("src/main/ShareSDK.demo.xml"))
    DevInfor.ShareSDK.@AppKey = PARENT_SHARESDK_APP_KEY
    DevInfor.Wechat.@AppId = appId
    DevInfor.Wechat.@AppSecret = appSecret
    DevInfor.WechatMoments.@AppId = appId
    DevInfor.WechatMoments.@AppSecret = appSecret

    file("src/main/assets/").mkdirs()
    file("src/main/assets/ShareSDK.xml").withPrintWriter { printWriter ->
        XmlNodePrinter nodePrinter = new XmlNodePrinter(printWriter);
        nodePrinter.setPreserveWhitespace(true);
        printWriter.println('<?xml version="1.0" encoding="utf-8"?>')
        nodePrinter.print(DevInfor);
        printWriter.flush()
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile 'junit:junit:4.12'
    compile 'com.fasterxml.jackson.core:jackson-core:2.6.5'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.6.5'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.6.5'
    compile 'com.nineoldandroids:library:2.4.0'
    compile project(':pingpp')
    compile project(':pingpp_one')
    compile project(':core')
    compile project(':ui')
    compile project(':report')
    compile 'me.relex:circleindicator:1.2.1'
    compile files('libs/MobCommons-2016.0816.1507.jar')
    compile files('libs/MobTools-2016.0816.1507.jar')
    compile 'com.android.support:design:24.2.0'
    compile 'com.android.support:support-v4:24.2.0'
    compile 'com.android.support:recyclerview-v7:24.2.0'
    compile 'com.android.support:cardview-v7:24.2.0'

}
